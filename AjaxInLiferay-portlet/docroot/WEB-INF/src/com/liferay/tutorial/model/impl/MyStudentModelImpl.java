/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.tutorial.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.tutorial.model.MyStudent;
import com.liferay.tutorial.model.MyStudentModel;
import com.liferay.tutorial.model.MyStudentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MyStudent service. Represents a row in the &quot;MyStudent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.tutorial.model.MyStudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MyStudentImpl}.
 * </p>
 *
 * @author annv
 * @see MyStudentImpl
 * @see com.liferay.tutorial.model.MyStudent
 * @see com.liferay.tutorial.model.MyStudentModel
 * @generated
 */
@JSON(strict = true)
public class MyStudentModelImpl extends BaseModelImpl<MyStudent>
	implements MyStudentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a my student model instance should use the {@link com.liferay.tutorial.model.MyStudent} interface instead.
	 */
	public static final String TABLE_NAME = "MyStudent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studentId", Types.BIGINT },
			{ "Code", Types.VARCHAR },
			{ "FullName", Types.VARCHAR },
			{ "Birthday", Types.TIMESTAMP },
			{ "Gender", Types.BOOLEAN },
			{ "Address", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table MyStudent (studentId LONG not null primary key,Code VARCHAR(75) null,FullName VARCHAR(75) null,Birthday DATE null,Gender BOOLEAN,Address VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MyStudent";
	public static final String ORDER_BY_JPQL = " ORDER BY myStudent.fullName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MyStudent.FullName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.tutorial.model.MyStudent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.tutorial.model.MyStudent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.tutorial.model.MyStudent"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long FULLNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MyStudent toModel(MyStudentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MyStudent model = new MyStudentImpl();

		model.setStudentId(soapModel.getStudentId());
		model.setCode(soapModel.getCode());
		model.setFullName(soapModel.getFullName());
		model.setBirthday(soapModel.getBirthday());
		model.setGender(soapModel.getGender());
		model.setAddress(soapModel.getAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MyStudent> toModels(MyStudentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MyStudent> models = new ArrayList<MyStudent>(soapModels.length);

		for (MyStudentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.tutorial.model.MyStudent"));

	public MyStudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MyStudent.class;
	}

	@Override
	public String getModelClassName() {
		return MyStudent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("studentId", getStudentId());
		attributes.put("code", getCode());
		attributes.put("fullName", getFullName());
		attributes.put("birthday", getBirthday());
		attributes.put("gender", getGender());
		attributes.put("address", getAddress());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long studentId = (Long)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		Date birthday = (Date)attributes.get("birthday");

		if (birthday != null) {
			setBirthday(birthday);
		}

		Boolean gender = (Boolean)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}
	}

	@JSON
	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_columnBitmask = -1L;

		_fullName = fullName;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		_birthday = birthday;
	}

	@JSON
	@Override
	public boolean getGender() {
		return _gender;
	}

	@Override
	public boolean isGender() {
		return _gender;
	}

	@Override
	public void setGender(boolean gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MyStudent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MyStudent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MyStudent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MyStudentImpl myStudentImpl = new MyStudentImpl();

		myStudentImpl.setStudentId(getStudentId());
		myStudentImpl.setCode(getCode());
		myStudentImpl.setFullName(getFullName());
		myStudentImpl.setBirthday(getBirthday());
		myStudentImpl.setGender(getGender());
		myStudentImpl.setAddress(getAddress());

		myStudentImpl.resetOriginalValues();

		return myStudentImpl;
	}

	@Override
	public int compareTo(MyStudent myStudent) {
		int value = 0;

		value = getFullName().compareTo(myStudent.getFullName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MyStudent)) {
			return false;
		}

		MyStudent myStudent = (MyStudent)obj;

		long primaryKey = myStudent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MyStudentModelImpl myStudentModelImpl = this;

		myStudentModelImpl._originalCode = myStudentModelImpl._code;

		myStudentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MyStudent> toCacheModel() {
		MyStudentCacheModel myStudentCacheModel = new MyStudentCacheModel();

		myStudentCacheModel.studentId = getStudentId();

		myStudentCacheModel.code = getCode();

		String code = myStudentCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			myStudentCacheModel.code = null;
		}

		myStudentCacheModel.fullName = getFullName();

		String fullName = myStudentCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			myStudentCacheModel.fullName = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			myStudentCacheModel.birthday = birthday.getTime();
		}
		else {
			myStudentCacheModel.birthday = Long.MIN_VALUE;
		}

		myStudentCacheModel.gender = getGender();

		myStudentCacheModel.address = getAddress();

		String address = myStudentCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			myStudentCacheModel.address = null;
		}

		return myStudentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{studentId=");
		sb.append(getStudentId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", birthday=");
		sb.append(getBirthday());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.tutorial.model.MyStudent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthday</column-name><column-value><![CDATA[");
		sb.append(getBirthday());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MyStudent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MyStudent.class
		};
	private long _studentId;
	private String _code;
	private String _originalCode;
	private String _fullName;
	private Date _birthday;
	private boolean _gender;
	private String _address;
	private long _columnBitmask;
	private MyStudent _escapedModel;
}