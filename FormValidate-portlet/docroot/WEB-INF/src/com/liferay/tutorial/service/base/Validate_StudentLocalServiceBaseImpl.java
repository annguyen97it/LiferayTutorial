/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.tutorial.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.tutorial.model.Validate_Student;
import com.liferay.tutorial.service.Validate_StudentLocalService;
import com.liferay.tutorial.service.persistence.Validate_StudentPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the validate_ student local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.tutorial.service.impl.Validate_StudentLocalServiceImpl}.
 * </p>
 *
 * @author annv
 * @see com.liferay.tutorial.service.impl.Validate_StudentLocalServiceImpl
 * @see com.liferay.tutorial.service.Validate_StudentLocalServiceUtil
 * @generated
 */
public abstract class Validate_StudentLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements Validate_StudentLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.tutorial.service.Validate_StudentLocalServiceUtil} to access the validate_ student local service.
	 */

	/**
	 * Adds the validate_ student to the database. Also notifies the appropriate model listeners.
	 *
	 * @param validate_Student the validate_ student
	 * @return the validate_ student that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Validate_Student addValidate_Student(
		Validate_Student validate_Student) throws SystemException {
		validate_Student.setNew(true);

		return validate_StudentPersistence.update(validate_Student);
	}

	/**
	 * Creates a new validate_ student with the primary key. Does not add the validate_ student to the database.
	 *
	 * @param studentId the primary key for the new validate_ student
	 * @return the new validate_ student
	 */
	@Override
	public Validate_Student createValidate_Student(long studentId) {
		return validate_StudentPersistence.create(studentId);
	}

	/**
	 * Deletes the validate_ student with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param studentId the primary key of the validate_ student
	 * @return the validate_ student that was removed
	 * @throws PortalException if a validate_ student with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Validate_Student deleteValidate_Student(long studentId)
		throws PortalException, SystemException {
		return validate_StudentPersistence.remove(studentId);
	}

	/**
	 * Deletes the validate_ student from the database. Also notifies the appropriate model listeners.
	 *
	 * @param validate_Student the validate_ student
	 * @return the validate_ student that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Validate_Student deleteValidate_Student(
		Validate_Student validate_Student) throws SystemException {
		return validate_StudentPersistence.remove(validate_Student);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Validate_Student.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return validate_StudentPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.tutorial.model.impl.Validate_StudentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return validate_StudentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.tutorial.model.impl.Validate_StudentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return validate_StudentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return validate_StudentPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return validate_StudentPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Validate_Student fetchValidate_Student(long studentId)
		throws SystemException {
		return validate_StudentPersistence.fetchByPrimaryKey(studentId);
	}

	/**
	 * Returns the validate_ student with the primary key.
	 *
	 * @param studentId the primary key of the validate_ student
	 * @return the validate_ student
	 * @throws PortalException if a validate_ student with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Validate_Student getValidate_Student(long studentId)
		throws PortalException, SystemException {
		return validate_StudentPersistence.findByPrimaryKey(studentId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return validate_StudentPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the validate_ students.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.tutorial.model.impl.Validate_StudentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of validate_ students
	 * @param end the upper bound of the range of validate_ students (not inclusive)
	 * @return the range of validate_ students
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Validate_Student> getValidate_Students(int start, int end)
		throws SystemException {
		return validate_StudentPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of validate_ students.
	 *
	 * @return the number of validate_ students
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getValidate_StudentsCount() throws SystemException {
		return validate_StudentPersistence.countAll();
	}

	/**
	 * Updates the validate_ student in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param validate_Student the validate_ student
	 * @return the validate_ student that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Validate_Student updateValidate_Student(
		Validate_Student validate_Student) throws SystemException {
		return validate_StudentPersistence.update(validate_Student);
	}

	/**
	 * Returns the validate_ student local service.
	 *
	 * @return the validate_ student local service
	 */
	public com.liferay.tutorial.service.Validate_StudentLocalService getValidate_StudentLocalService() {
		return validate_StudentLocalService;
	}

	/**
	 * Sets the validate_ student local service.
	 *
	 * @param validate_StudentLocalService the validate_ student local service
	 */
	public void setValidate_StudentLocalService(
		com.liferay.tutorial.service.Validate_StudentLocalService validate_StudentLocalService) {
		this.validate_StudentLocalService = validate_StudentLocalService;
	}

	/**
	 * Returns the validate_ student remote service.
	 *
	 * @return the validate_ student remote service
	 */
	public com.liferay.tutorial.service.Validate_StudentService getValidate_StudentService() {
		return validate_StudentService;
	}

	/**
	 * Sets the validate_ student remote service.
	 *
	 * @param validate_StudentService the validate_ student remote service
	 */
	public void setValidate_StudentService(
		com.liferay.tutorial.service.Validate_StudentService validate_StudentService) {
		this.validate_StudentService = validate_StudentService;
	}

	/**
	 * Returns the validate_ student persistence.
	 *
	 * @return the validate_ student persistence
	 */
	public Validate_StudentPersistence getValidate_StudentPersistence() {
		return validate_StudentPersistence;
	}

	/**
	 * Sets the validate_ student persistence.
	 *
	 * @param validate_StudentPersistence the validate_ student persistence
	 */
	public void setValidate_StudentPersistence(
		Validate_StudentPersistence validate_StudentPersistence) {
		this.validate_StudentPersistence = validate_StudentPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.tutorial.model.Validate_Student",
			validate_StudentLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.tutorial.model.Validate_Student");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Validate_Student.class;
	}

	protected String getModelClassName() {
		return Validate_Student.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = validate_StudentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.tutorial.service.Validate_StudentLocalService.class)
	protected com.liferay.tutorial.service.Validate_StudentLocalService validate_StudentLocalService;
	@BeanReference(type = com.liferay.tutorial.service.Validate_StudentService.class)
	protected com.liferay.tutorial.service.Validate_StudentService validate_StudentService;
	@BeanReference(type = Validate_StudentPersistence.class)
	protected Validate_StudentPersistence validate_StudentPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private Validate_StudentLocalServiceClpInvoker _clpInvoker = new Validate_StudentLocalServiceClpInvoker();
}